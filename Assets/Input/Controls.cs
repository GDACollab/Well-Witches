//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay_Gatherer"",
            ""id"": ""d4902dec-a812-4723-b645-cf4f4840c02c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1048bd76-5a7f-48dc-8848-2e9d1ada3a51"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Value"",
                    ""id"": ""822e5f86-0676-4fec-8086-d8ef0b446200"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pull Warden"",
                    ""type"": ""Button"",
                    ""id"": ""38e555f2-3271-406f-bb61-cfe0a5dbe12c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Ability"",
                    ""type"": ""Button"",
                    ""id"": ""4b63c30e-5073-4ad7-8b2e-c84a644724e0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Ability After Hold"",
                    ""type"": ""Button"",
                    ""id"": ""aebcaee9-572f-428f-8fbe-55e2bb9c7821"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=5)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""fafdc6d2-6ca5-424f-ba34-ec78a41aa596"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c0160dc9-b878-40c4-9814-f0d2b289a1a9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3601cd41-b45b-453f-8ec0-19c5dd566670"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""202a4e6e-c2ad-415c-8af6-7b93991322d0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e019745e-e7f3-409a-84ef-798b6e13653a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""55d4b259-7b18-460c-9a28-f9e59a936d04"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""963515da-1956-4c28-a964-703076e0c8f3"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e87f8c3d-1462-445c-9c38-186ee22360d3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72f705ab-6aef-4469-9b9e-bc7577dd04f8"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""007d9529-2d29-4198-b50c-e21bd3a2c110"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""444b2ff5-94d1-4d01-977a-49b73f0fc128"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Pull Warden"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1096a1ed-3a6f-4999-9ec7-a137a636539e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pull Warden"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6fa62a5-0d88-4251-a32a-71091502ad47"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Activate Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f0294dd-328f-4c0e-8af2-0316b33d6007"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2a0d636-5f92-4e30-b747-72d30dc026b8"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc794f16-bfbd-4a23-b71a-1f8f9f3bb506"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Ability After Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""318bd81d-cad6-44e3-b191-7700739ba534"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Ability After Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay_Warden"",
            ""id"": ""5d21ef32-969f-4789-8c52-106ed13270dc"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d86009bf-f483-4441-8fae-be1646dc0d78"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""92f18b23-80cd-47b1-a562-e44145612afc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Ability"",
                    ""type"": ""Button"",
                    ""id"": ""33b9fa95-ccb4-472b-b5f6-a8dda9a18912"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""4724f625-09da-494a-86bc-5cbfe1f40a81"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7f71229f-f481-45fc-9f8b-146fd77cc3ca"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b45f4f85-30e1-4dc1-9675-14f46dd90a4a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d1c8ff3f-6726-4197-a615-2bbf79085eb1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b796b58f-4f59-454a-b80e-022dbc6e792a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""027df28c-5f6e-4261-860f-067455109e83"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49f65c61-d02a-4d56-a9ab-aae09a521cd3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Activate Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ui_Navigate"",
            ""id"": ""661372ea-1224-43a4-bfcf-d24bff074171"",
            ""actions"": [
                {
                    ""name"": ""Continue Cutscene"",
                    ""type"": ""Button"",
                    ""id"": ""0fa2304d-d4de-42b2-b247-bc458f8bc1c1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""e43af6e5-ffa0-4dd9-9ce3-81f2a51815ed"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Page Left"",
                    ""type"": ""Button"",
                    ""id"": ""d5a43f87-422f-497f-a4f1-c0f3c61651e6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Page Right"",
                    ""type"": ""Button"",
                    ""id"": ""e14bf8c4-10b8-4532-b948-655eff1e5e17"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""a2c0c44d-0eca-4fbe-9ca9-b97042ea4ff9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""249cf7db-3c2d-42ee-a04c-1f4a53578a6e"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue Cutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd084756-20e7-4535-b89c-25404cf0ba5e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue Cutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d07e26a8-8506-4fff-9501-f711811f6c4b"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue Cutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5687dfe3-c593-4e8e-a7b5-c9276d50bd5e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue Cutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b2bb3d94-3114-4a27-983c-9e7a95a77566"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue Cutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94e6271c-4fcf-4a9c-abd1-c8f03536e803"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue Cutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1b7a2e89-5c61-4cf0-b508-4dc502126a93"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fedde1b7-fe8b-4b56-bc87-1b1d84cb7b2a"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3e83c3a9-4d8d-4a13-aa21-1af5a5cdd142"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Page Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a9627ed-6fdb-4f70-8cac-c63b8666e2fc"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Page Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81005635-ce2f-4c38-b91f-e9e7ee74669c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Page Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""795ab1bc-5afd-4b9d-b913-69da586a3e29"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Page Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28539f14-2b62-45e2-b5d8-ea6dff58b31f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2eafb709-2e6b-4157-910c-fb9ad082ad9d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""295460a8-298e-46f4-b877-8bc6dc61e7eb"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cheat Code"",
            ""id"": ""c03ae563-fbdb-4796-9832-761c1198690f"",
            ""actions"": [
                {
                    ""name"": ""Key Combination"",
                    ""type"": ""Button"",
                    ""id"": ""b492765a-105d-40ea-93d9-5a0146361580"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f18dfd86-7e31-4af1-bab7-2bb28c33c771"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key Combination"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Two Modifiers"",
                    ""id"": ""c23012f4-b014-4b06-a84f-5c52c062f2f2"",
                    ""path"": ""TwoModifiers"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key Combination"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier1"",
                    ""id"": ""6debde89-9072-4de8-9d4d-c7ab0610cc86"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key Combination"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""modifier2"",
                    ""id"": ""1ef4c7a0-29b8-43c6-8cc0-d647e319b3ae"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key Combination"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""856ec25d-a828-49fd-b9bd-b15d98773566"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Key Combination"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay_Gatherer
        m_Gameplay_Gatherer = asset.FindActionMap("Gameplay_Gatherer", throwIfNotFound: true);
        m_Gameplay_Gatherer_Move = m_Gameplay_Gatherer.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Gatherer_Interact = m_Gameplay_Gatherer.FindAction("Interact", throwIfNotFound: true);
        m_Gameplay_Gatherer_PullWarden = m_Gameplay_Gatherer.FindAction("Pull Warden", throwIfNotFound: true);
        m_Gameplay_Gatherer_ActivateAbility = m_Gameplay_Gatherer.FindAction("Activate Ability", throwIfNotFound: true);
        m_Gameplay_Gatherer_ActivateAbilityAfterHold = m_Gameplay_Gatherer.FindAction("Activate Ability After Hold", throwIfNotFound: true);
        // Gameplay_Warden
        m_Gameplay_Warden = asset.FindActionMap("Gameplay_Warden", throwIfNotFound: true);
        m_Gameplay_Warden_Move = m_Gameplay_Warden.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Warden_Shoot = m_Gameplay_Warden.FindAction("Shoot", throwIfNotFound: true);
        m_Gameplay_Warden_ActivateAbility = m_Gameplay_Warden.FindAction("Activate Ability", throwIfNotFound: true);
        // Ui_Navigate
        m_Ui_Navigate = asset.FindActionMap("Ui_Navigate", throwIfNotFound: true);
        m_Ui_Navigate_ContinueCutscene = m_Ui_Navigate.FindAction("Continue Cutscene", throwIfNotFound: true);
        m_Ui_Navigate_Pause = m_Ui_Navigate.FindAction("Pause", throwIfNotFound: true);
        m_Ui_Navigate_PageLeft = m_Ui_Navigate.FindAction("Page Left", throwIfNotFound: true);
        m_Ui_Navigate_PageRight = m_Ui_Navigate.FindAction("Page Right", throwIfNotFound: true);
        m_Ui_Navigate_Submit = m_Ui_Navigate.FindAction("Submit", throwIfNotFound: true);
        // Cheat Code
        m_CheatCode = asset.FindActionMap("Cheat Code", throwIfNotFound: true);
        m_CheatCode_KeyCombination = m_CheatCode.FindAction("Key Combination", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_Gameplay_Gatherer.enabled, "This will cause a leak and performance issues, Controls.Gameplay_Gatherer.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Gameplay_Warden.enabled, "This will cause a leak and performance issues, Controls.Gameplay_Warden.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Ui_Navigate.enabled, "This will cause a leak and performance issues, Controls.Ui_Navigate.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_CheatCode.enabled, "This will cause a leak and performance issues, Controls.CheatCode.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay_Gatherer
    private readonly InputActionMap m_Gameplay_Gatherer;
    private List<IGameplay_GathererActions> m_Gameplay_GathererActionsCallbackInterfaces = new List<IGameplay_GathererActions>();
    private readonly InputAction m_Gameplay_Gatherer_Move;
    private readonly InputAction m_Gameplay_Gatherer_Interact;
    private readonly InputAction m_Gameplay_Gatherer_PullWarden;
    private readonly InputAction m_Gameplay_Gatherer_ActivateAbility;
    private readonly InputAction m_Gameplay_Gatherer_ActivateAbilityAfterHold;
    public struct Gameplay_GathererActions
    {
        private @Controls m_Wrapper;
        public Gameplay_GathererActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Gatherer_Move;
        public InputAction @Interact => m_Wrapper.m_Gameplay_Gatherer_Interact;
        public InputAction @PullWarden => m_Wrapper.m_Gameplay_Gatherer_PullWarden;
        public InputAction @ActivateAbility => m_Wrapper.m_Gameplay_Gatherer_ActivateAbility;
        public InputAction @ActivateAbilityAfterHold => m_Wrapper.m_Gameplay_Gatherer_ActivateAbilityAfterHold;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay_Gatherer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Gameplay_GathererActions set) { return set.Get(); }
        public void AddCallbacks(IGameplay_GathererActions instance)
        {
            if (instance == null || m_Wrapper.m_Gameplay_GathererActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Gameplay_GathererActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @PullWarden.started += instance.OnPullWarden;
            @PullWarden.performed += instance.OnPullWarden;
            @PullWarden.canceled += instance.OnPullWarden;
            @ActivateAbility.started += instance.OnActivateAbility;
            @ActivateAbility.performed += instance.OnActivateAbility;
            @ActivateAbility.canceled += instance.OnActivateAbility;
            @ActivateAbilityAfterHold.started += instance.OnActivateAbilityAfterHold;
            @ActivateAbilityAfterHold.performed += instance.OnActivateAbilityAfterHold;
            @ActivateAbilityAfterHold.canceled += instance.OnActivateAbilityAfterHold;
        }

        private void UnregisterCallbacks(IGameplay_GathererActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @PullWarden.started -= instance.OnPullWarden;
            @PullWarden.performed -= instance.OnPullWarden;
            @PullWarden.canceled -= instance.OnPullWarden;
            @ActivateAbility.started -= instance.OnActivateAbility;
            @ActivateAbility.performed -= instance.OnActivateAbility;
            @ActivateAbility.canceled -= instance.OnActivateAbility;
            @ActivateAbilityAfterHold.started -= instance.OnActivateAbilityAfterHold;
            @ActivateAbilityAfterHold.performed -= instance.OnActivateAbilityAfterHold;
            @ActivateAbilityAfterHold.canceled -= instance.OnActivateAbilityAfterHold;
        }

        public void RemoveCallbacks(IGameplay_GathererActions instance)
        {
            if (m_Wrapper.m_Gameplay_GathererActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplay_GathererActions instance)
        {
            foreach (var item in m_Wrapper.m_Gameplay_GathererActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Gameplay_GathererActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Gameplay_GathererActions @Gameplay_Gatherer => new Gameplay_GathererActions(this);

    // Gameplay_Warden
    private readonly InputActionMap m_Gameplay_Warden;
    private List<IGameplay_WardenActions> m_Gameplay_WardenActionsCallbackInterfaces = new List<IGameplay_WardenActions>();
    private readonly InputAction m_Gameplay_Warden_Move;
    private readonly InputAction m_Gameplay_Warden_Shoot;
    private readonly InputAction m_Gameplay_Warden_ActivateAbility;
    public struct Gameplay_WardenActions
    {
        private @Controls m_Wrapper;
        public Gameplay_WardenActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Warden_Move;
        public InputAction @Shoot => m_Wrapper.m_Gameplay_Warden_Shoot;
        public InputAction @ActivateAbility => m_Wrapper.m_Gameplay_Warden_ActivateAbility;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay_Warden; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Gameplay_WardenActions set) { return set.Get(); }
        public void AddCallbacks(IGameplay_WardenActions instance)
        {
            if (instance == null || m_Wrapper.m_Gameplay_WardenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Gameplay_WardenActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @ActivateAbility.started += instance.OnActivateAbility;
            @ActivateAbility.performed += instance.OnActivateAbility;
            @ActivateAbility.canceled += instance.OnActivateAbility;
        }

        private void UnregisterCallbacks(IGameplay_WardenActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @ActivateAbility.started -= instance.OnActivateAbility;
            @ActivateAbility.performed -= instance.OnActivateAbility;
            @ActivateAbility.canceled -= instance.OnActivateAbility;
        }

        public void RemoveCallbacks(IGameplay_WardenActions instance)
        {
            if (m_Wrapper.m_Gameplay_WardenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplay_WardenActions instance)
        {
            foreach (var item in m_Wrapper.m_Gameplay_WardenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Gameplay_WardenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Gameplay_WardenActions @Gameplay_Warden => new Gameplay_WardenActions(this);

    // Ui_Navigate
    private readonly InputActionMap m_Ui_Navigate;
    private List<IUi_NavigateActions> m_Ui_NavigateActionsCallbackInterfaces = new List<IUi_NavigateActions>();
    private readonly InputAction m_Ui_Navigate_ContinueCutscene;
    private readonly InputAction m_Ui_Navigate_Pause;
    private readonly InputAction m_Ui_Navigate_PageLeft;
    private readonly InputAction m_Ui_Navigate_PageRight;
    private readonly InputAction m_Ui_Navigate_Submit;
    public struct Ui_NavigateActions
    {
        private @Controls m_Wrapper;
        public Ui_NavigateActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ContinueCutscene => m_Wrapper.m_Ui_Navigate_ContinueCutscene;
        public InputAction @Pause => m_Wrapper.m_Ui_Navigate_Pause;
        public InputAction @PageLeft => m_Wrapper.m_Ui_Navigate_PageLeft;
        public InputAction @PageRight => m_Wrapper.m_Ui_Navigate_PageRight;
        public InputAction @Submit => m_Wrapper.m_Ui_Navigate_Submit;
        public InputActionMap Get() { return m_Wrapper.m_Ui_Navigate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Ui_NavigateActions set) { return set.Get(); }
        public void AddCallbacks(IUi_NavigateActions instance)
        {
            if (instance == null || m_Wrapper.m_Ui_NavigateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Ui_NavigateActionsCallbackInterfaces.Add(instance);
            @ContinueCutscene.started += instance.OnContinueCutscene;
            @ContinueCutscene.performed += instance.OnContinueCutscene;
            @ContinueCutscene.canceled += instance.OnContinueCutscene;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @PageLeft.started += instance.OnPageLeft;
            @PageLeft.performed += instance.OnPageLeft;
            @PageLeft.canceled += instance.OnPageLeft;
            @PageRight.started += instance.OnPageRight;
            @PageRight.performed += instance.OnPageRight;
            @PageRight.canceled += instance.OnPageRight;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
        }

        private void UnregisterCallbacks(IUi_NavigateActions instance)
        {
            @ContinueCutscene.started -= instance.OnContinueCutscene;
            @ContinueCutscene.performed -= instance.OnContinueCutscene;
            @ContinueCutscene.canceled -= instance.OnContinueCutscene;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @PageLeft.started -= instance.OnPageLeft;
            @PageLeft.performed -= instance.OnPageLeft;
            @PageLeft.canceled -= instance.OnPageLeft;
            @PageRight.started -= instance.OnPageRight;
            @PageRight.performed -= instance.OnPageRight;
            @PageRight.canceled -= instance.OnPageRight;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
        }

        public void RemoveCallbacks(IUi_NavigateActions instance)
        {
            if (m_Wrapper.m_Ui_NavigateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUi_NavigateActions instance)
        {
            foreach (var item in m_Wrapper.m_Ui_NavigateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Ui_NavigateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Ui_NavigateActions @Ui_Navigate => new Ui_NavigateActions(this);

    // Cheat Code
    private readonly InputActionMap m_CheatCode;
    private List<ICheatCodeActions> m_CheatCodeActionsCallbackInterfaces = new List<ICheatCodeActions>();
    private readonly InputAction m_CheatCode_KeyCombination;
    public struct CheatCodeActions
    {
        private @Controls m_Wrapper;
        public CheatCodeActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @KeyCombination => m_Wrapper.m_CheatCode_KeyCombination;
        public InputActionMap Get() { return m_Wrapper.m_CheatCode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheatCodeActions set) { return set.Get(); }
        public void AddCallbacks(ICheatCodeActions instance)
        {
            if (instance == null || m_Wrapper.m_CheatCodeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CheatCodeActionsCallbackInterfaces.Add(instance);
            @KeyCombination.started += instance.OnKeyCombination;
            @KeyCombination.performed += instance.OnKeyCombination;
            @KeyCombination.canceled += instance.OnKeyCombination;
        }

        private void UnregisterCallbacks(ICheatCodeActions instance)
        {
            @KeyCombination.started -= instance.OnKeyCombination;
            @KeyCombination.performed -= instance.OnKeyCombination;
            @KeyCombination.canceled -= instance.OnKeyCombination;
        }

        public void RemoveCallbacks(ICheatCodeActions instance)
        {
            if (m_Wrapper.m_CheatCodeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICheatCodeActions instance)
        {
            foreach (var item in m_Wrapper.m_CheatCodeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CheatCodeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CheatCodeActions @CheatCode => new CheatCodeActions(this);
    public interface IGameplay_GathererActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPullWarden(InputAction.CallbackContext context);
        void OnActivateAbility(InputAction.CallbackContext context);
        void OnActivateAbilityAfterHold(InputAction.CallbackContext context);
    }
    public interface IGameplay_WardenActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnActivateAbility(InputAction.CallbackContext context);
    }
    public interface IUi_NavigateActions
    {
        void OnContinueCutscene(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnPageLeft(InputAction.CallbackContext context);
        void OnPageRight(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
    }
    public interface ICheatCodeActions
    {
        void OnKeyCombination(InputAction.CallbackContext context);
    }
}
