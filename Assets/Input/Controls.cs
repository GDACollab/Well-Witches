//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Gameplay_Gatherer"",
            ""id"": ""d4902dec-a812-4723-b645-cf4f4840c02c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1048bd76-5a7f-48dc-8848-2e9d1ada3a51"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Value"",
                    ""id"": ""822e5f86-0676-4fec-8086-d8ef0b446200"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pull Warden"",
                    ""type"": ""Button"",
                    ""id"": ""38e555f2-3271-406f-bb61-cfe0a5dbe12c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Ability"",
                    ""type"": ""Button"",
                    ""id"": ""4b63c30e-5073-4ad7-8b2e-c84a644724e0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Ability After Hold"",
                    ""type"": ""Button"",
                    ""id"": ""aebcaee9-572f-428f-8fbe-55e2bb9c7821"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=5)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ability Menu"",
                    ""type"": ""Button"",
                    ""id"": ""5d075408-650f-45b1-9734-7a774ec53dc9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""fafdc6d2-6ca5-424f-ba34-ec78a41aa596"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c0160dc9-b878-40c4-9814-f0d2b289a1a9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3601cd41-b45b-453f-8ec0-19c5dd566670"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""202a4e6e-c2ad-415c-8af6-7b93991322d0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e019745e-e7f3-409a-84ef-798b6e13653a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e87f8c3d-1462-445c-9c38-186ee22360d3"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""444b2ff5-94d1-4d01-977a-49b73f0fc128"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Pull Warden"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6fa62a5-0d88-4251-a32a-71091502ad47"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Activate Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc794f16-bfbd-4a23-b71a-1f8f9f3bb506"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate Ability After Hold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72e7b915-d2dd-4a0b-a7ff-4164df59b701"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ability Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay_Warden"",
            ""id"": ""5d21ef32-969f-4789-8c52-106ed13270dc"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d86009bf-f483-4441-8fae-be1646dc0d78"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""92f18b23-80cd-47b1-a562-e44145612afc"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Activate Ability"",
                    ""type"": ""Button"",
                    ""id"": ""33b9fa95-ccb4-472b-b5f6-a8dda9a18912"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Arrow Keys"",
                    ""id"": ""4724f625-09da-494a-86bc-5cbfe1f40a81"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7f71229f-f481-45fc-9f8b-146fd77cc3ca"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b45f4f85-30e1-4dc1-9675-14f46dd90a4a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d1c8ff3f-6726-4197-a615-2bbf79085eb1"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b796b58f-4f59-454a-b80e-022dbc6e792a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""027df28c-5f6e-4261-860f-067455109e83"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49f65c61-d02a-4d56-a9ab-aae09a521cd3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse and Keyboard"",
                    ""action"": ""Activate Ability"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Ui_Navigate"",
            ""id"": ""661372ea-1224-43a4-bfcf-d24bff074171"",
            ""actions"": [
                {
                    ""name"": ""Continue Cutscene"",
                    ""type"": ""Button"",
                    ""id"": ""0fa2304d-d4de-42b2-b247-bc458f8bc1c1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""249cf7db-3c2d-42ee-a04c-1f4a53578a6e"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue Cutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd084756-20e7-4535-b89c-25404cf0ba5e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue Cutscene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay_Gatherer
        m_Gameplay_Gatherer = asset.FindActionMap("Gameplay_Gatherer", throwIfNotFound: true);
        m_Gameplay_Gatherer_Move = m_Gameplay_Gatherer.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Gatherer_Interact = m_Gameplay_Gatherer.FindAction("Interact", throwIfNotFound: true);
        m_Gameplay_Gatherer_PullWarden = m_Gameplay_Gatherer.FindAction("Pull Warden", throwIfNotFound: true);
        m_Gameplay_Gatherer_ActivateAbility = m_Gameplay_Gatherer.FindAction("Activate Ability", throwIfNotFound: true);
        m_Gameplay_Gatherer_ActivateAbilityAfterHold = m_Gameplay_Gatherer.FindAction("Activate Ability After Hold", throwIfNotFound: true);
        m_Gameplay_Gatherer_AbilityMenu = m_Gameplay_Gatherer.FindAction("Ability Menu", throwIfNotFound: true);
        // Gameplay_Warden
        m_Gameplay_Warden = asset.FindActionMap("Gameplay_Warden", throwIfNotFound: true);
        m_Gameplay_Warden_Move = m_Gameplay_Warden.FindAction("Move", throwIfNotFound: true);
        m_Gameplay_Warden_Shoot = m_Gameplay_Warden.FindAction("Shoot", throwIfNotFound: true);
        m_Gameplay_Warden_ActivateAbility = m_Gameplay_Warden.FindAction("Activate Ability", throwIfNotFound: true);
        // Ui_Navigate
        m_Ui_Navigate = asset.FindActionMap("Ui_Navigate", throwIfNotFound: true);
        m_Ui_Navigate_ContinueCutscene = m_Ui_Navigate.FindAction("Continue Cutscene", throwIfNotFound: true);
    }

    ~@Controls()
    {
        UnityEngine.Debug.Assert(!m_Gameplay_Gatherer.enabled, "This will cause a leak and performance issues, Controls.Gameplay_Gatherer.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Gameplay_Warden.enabled, "This will cause a leak and performance issues, Controls.Gameplay_Warden.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Ui_Navigate.enabled, "This will cause a leak and performance issues, Controls.Ui_Navigate.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay_Gatherer
    private readonly InputActionMap m_Gameplay_Gatherer;
    private List<IGameplay_GathererActions> m_Gameplay_GathererActionsCallbackInterfaces = new List<IGameplay_GathererActions>();
    private readonly InputAction m_Gameplay_Gatherer_Move;
    private readonly InputAction m_Gameplay_Gatherer_Interact;
    private readonly InputAction m_Gameplay_Gatherer_PullWarden;
    private readonly InputAction m_Gameplay_Gatherer_ActivateAbility;
    private readonly InputAction m_Gameplay_Gatherer_ActivateAbilityAfterHold;
    private readonly InputAction m_Gameplay_Gatherer_AbilityMenu;
    public struct Gameplay_GathererActions
    {
        private @Controls m_Wrapper;
        public Gameplay_GathererActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Gatherer_Move;
        public InputAction @Interact => m_Wrapper.m_Gameplay_Gatherer_Interact;
        public InputAction @PullWarden => m_Wrapper.m_Gameplay_Gatherer_PullWarden;
        public InputAction @ActivateAbility => m_Wrapper.m_Gameplay_Gatherer_ActivateAbility;
        public InputAction @ActivateAbilityAfterHold => m_Wrapper.m_Gameplay_Gatherer_ActivateAbilityAfterHold;
        public InputAction @AbilityMenu => m_Wrapper.m_Gameplay_Gatherer_AbilityMenu;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay_Gatherer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Gameplay_GathererActions set) { return set.Get(); }
        public void AddCallbacks(IGameplay_GathererActions instance)
        {
            if (instance == null || m_Wrapper.m_Gameplay_GathererActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Gameplay_GathererActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @PullWarden.started += instance.OnPullWarden;
            @PullWarden.performed += instance.OnPullWarden;
            @PullWarden.canceled += instance.OnPullWarden;
            @ActivateAbility.started += instance.OnActivateAbility;
            @ActivateAbility.performed += instance.OnActivateAbility;
            @ActivateAbility.canceled += instance.OnActivateAbility;
            @ActivateAbilityAfterHold.started += instance.OnActivateAbilityAfterHold;
            @ActivateAbilityAfterHold.performed += instance.OnActivateAbilityAfterHold;
            @ActivateAbilityAfterHold.canceled += instance.OnActivateAbilityAfterHold;
            @AbilityMenu.started += instance.OnAbilityMenu;
            @AbilityMenu.performed += instance.OnAbilityMenu;
            @AbilityMenu.canceled += instance.OnAbilityMenu;
        }

        private void UnregisterCallbacks(IGameplay_GathererActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @PullWarden.started -= instance.OnPullWarden;
            @PullWarden.performed -= instance.OnPullWarden;
            @PullWarden.canceled -= instance.OnPullWarden;
            @ActivateAbility.started -= instance.OnActivateAbility;
            @ActivateAbility.performed -= instance.OnActivateAbility;
            @ActivateAbility.canceled -= instance.OnActivateAbility;
            @ActivateAbilityAfterHold.started -= instance.OnActivateAbilityAfterHold;
            @ActivateAbilityAfterHold.performed -= instance.OnActivateAbilityAfterHold;
            @ActivateAbilityAfterHold.canceled -= instance.OnActivateAbilityAfterHold;
            @AbilityMenu.started -= instance.OnAbilityMenu;
            @AbilityMenu.performed -= instance.OnAbilityMenu;
            @AbilityMenu.canceled -= instance.OnAbilityMenu;
        }

        public void RemoveCallbacks(IGameplay_GathererActions instance)
        {
            if (m_Wrapper.m_Gameplay_GathererActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplay_GathererActions instance)
        {
            foreach (var item in m_Wrapper.m_Gameplay_GathererActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Gameplay_GathererActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Gameplay_GathererActions @Gameplay_Gatherer => new Gameplay_GathererActions(this);

    // Gameplay_Warden
    private readonly InputActionMap m_Gameplay_Warden;
    private List<IGameplay_WardenActions> m_Gameplay_WardenActionsCallbackInterfaces = new List<IGameplay_WardenActions>();
    private readonly InputAction m_Gameplay_Warden_Move;
    private readonly InputAction m_Gameplay_Warden_Shoot;
    private readonly InputAction m_Gameplay_Warden_ActivateAbility;
    public struct Gameplay_WardenActions
    {
        private @Controls m_Wrapper;
        public Gameplay_WardenActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Warden_Move;
        public InputAction @Shoot => m_Wrapper.m_Gameplay_Warden_Shoot;
        public InputAction @ActivateAbility => m_Wrapper.m_Gameplay_Warden_ActivateAbility;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay_Warden; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Gameplay_WardenActions set) { return set.Get(); }
        public void AddCallbacks(IGameplay_WardenActions instance)
        {
            if (instance == null || m_Wrapper.m_Gameplay_WardenActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Gameplay_WardenActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @ActivateAbility.started += instance.OnActivateAbility;
            @ActivateAbility.performed += instance.OnActivateAbility;
            @ActivateAbility.canceled += instance.OnActivateAbility;
        }

        private void UnregisterCallbacks(IGameplay_WardenActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @ActivateAbility.started -= instance.OnActivateAbility;
            @ActivateAbility.performed -= instance.OnActivateAbility;
            @ActivateAbility.canceled -= instance.OnActivateAbility;
        }

        public void RemoveCallbacks(IGameplay_WardenActions instance)
        {
            if (m_Wrapper.m_Gameplay_WardenActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplay_WardenActions instance)
        {
            foreach (var item in m_Wrapper.m_Gameplay_WardenActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Gameplay_WardenActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Gameplay_WardenActions @Gameplay_Warden => new Gameplay_WardenActions(this);

    // Ui_Navigate
    private readonly InputActionMap m_Ui_Navigate;
    private List<IUi_NavigateActions> m_Ui_NavigateActionsCallbackInterfaces = new List<IUi_NavigateActions>();
    private readonly InputAction m_Ui_Navigate_ContinueCutscene;
    public struct Ui_NavigateActions
    {
        private @Controls m_Wrapper;
        public Ui_NavigateActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ContinueCutscene => m_Wrapper.m_Ui_Navigate_ContinueCutscene;
        public InputActionMap Get() { return m_Wrapper.m_Ui_Navigate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Ui_NavigateActions set) { return set.Get(); }
        public void AddCallbacks(IUi_NavigateActions instance)
        {
            if (instance == null || m_Wrapper.m_Ui_NavigateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Ui_NavigateActionsCallbackInterfaces.Add(instance);
            @ContinueCutscene.started += instance.OnContinueCutscene;
            @ContinueCutscene.performed += instance.OnContinueCutscene;
            @ContinueCutscene.canceled += instance.OnContinueCutscene;
        }

        private void UnregisterCallbacks(IUi_NavigateActions instance)
        {
            @ContinueCutscene.started -= instance.OnContinueCutscene;
            @ContinueCutscene.performed -= instance.OnContinueCutscene;
            @ContinueCutscene.canceled -= instance.OnContinueCutscene;
        }

        public void RemoveCallbacks(IUi_NavigateActions instance)
        {
            if (m_Wrapper.m_Ui_NavigateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUi_NavigateActions instance)
        {
            foreach (var item in m_Wrapper.m_Ui_NavigateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Ui_NavigateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Ui_NavigateActions @Ui_Navigate => new Ui_NavigateActions(this);
    public interface IGameplay_GathererActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnPullWarden(InputAction.CallbackContext context);
        void OnActivateAbility(InputAction.CallbackContext context);
        void OnActivateAbilityAfterHold(InputAction.CallbackContext context);
        void OnAbilityMenu(InputAction.CallbackContext context);
    }
    public interface IGameplay_WardenActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnActivateAbility(InputAction.CallbackContext context);
    }
    public interface IUi_NavigateActions
    {
        void OnContinueCutscene(InputAction.CallbackContext context);
    }
}
